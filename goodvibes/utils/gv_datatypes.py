from dataclasses import dataclass, field, fields
from datetime import datetime, timezone
import csv
import re
from enum import Enum

# Parses a mads-style filename (e.g. Node124-Ch1-7-2023_04_10_14_15_00-9866Hz.wav)
# into a datetime reflecting the file's start time
def parseTimeFromMadsFilename(filename: str) -> datetime:
    time = datetime.strptime(filename.split("-")[3], '%Y_%m_%d_%H_%M_%S')
    return time

# Base class for Good Vibrations enum. Overrides __str__ to return the enum value
# instead of the enum constant name
class GvEnum(Enum):
    def __str__(self):
        return str(self.value)

# Base class for Good Vibrations output data records. Contains methods for writing the data
# to CSV
@dataclass
class GvRecord:
    @staticmethod
    def write_csv_header(csv_writer: csv.writer, with_titles: bool):
        if with_titles:
            csv_writer.writerow(['ID', 'Sequence Number', 'Timestamp', 'Value', 'Feature Title'])
        else:
            csv_writer.writerow(['ID', 'Sequence Number', 'Timestamp', 'Value'])

    def write_to_csv(self, csv_writer: csv.writer, sequence : int, time: datetime, with_titles: bool):
        for field_info in fields(self):
            field_id = field_info.metadata.get('ID')
            field_value = getattr(self, field_info.name)
            timestr = time.astimezone(timezone.utc).isoformat(timespec='seconds').replace('+00:00', 'Z')
            if (field_value is not None):
                if (with_titles):
                    # separate words and convert to title case
                    name = re.sub(r"[A-Z]|\d", " \\g<0>", field_info.name).title()
                    csv_writer.writerow([field_id, sequence, timestr, field_value, name])
                else:
                    csv_writer.writerow([field_id, sequence, timestr, field_value])

# The following class definitions were initially generated by running the 
# "2023-05-03_R5_DARTS CHALLENGE OUTPUT FILE_NS_v5.xlsx"
# file through an LLM, using the prompt below.
# The LLM output was manually cleaned up for consistency.
#
#
# I've got a list of stuff that I want to store in a python class. The first column of the list contains
# a numeric ID, which we will need to use later. SEQ, TIME, and SNR should be ignored. The next column 
# contains a field name. The last column contains a description.
#
# Generate a Python class definition, using dataclasses, to encapsulate this data. The field name should 
# be converted to camel case. Add a comment for each field containing the description. Convert the 
# descriptions to mixed case. The field ID should be stored in the field metadata.
# 
# 3 SEQ # TIME SNR SEISMIC FREQUENCY 1 SEISMIC FUNDAMENTAL FREQUENCY OF INTEREST 1 IN HERTZ. (By highest power PSD)
# ... (Etc. One tab at a time.)

@dataclass
class ZeroOrderSeismicFeatureData(GvRecord):
    # ID(3): Seismic Fundamental Frequency Of Interest 1 In Hertz. (By Highest Power PSD)
    seismicFrequency1: float = field(default=None, metadata={'ID': 3})
    # ID(4): First Order Harmonic Of Seismic Frequency 1 In Hertz.
    firstOrderHarmonic1: float = field(default=None, metadata={'ID': 4})
    # ID(5): Second Order Harmonic Of Seismic Frequency 1 In Hertz.
    secondOrderHarmonic1: float = field(default=None, metadata={'ID': 5})
    # ID(6): Third Order Harmonic Of Seismic Frequency 1 In Hertz.
    thirdOrderHarmonic1: float = field(default=None, metadata={'ID': 6})
    # ID(7): Amplitude Of The Seismic Frequency Of Interest 1 In dB.
    amplitudeOfFrequency1: float = field(default=None, metadata={'ID': 7})
    
    # ID(8): Seismic Frequency Of Interest 2 In Hertz.
    seismicFrequency2: float = field(default=None, metadata={'ID': 8})
    # ID(9): First Order Harmonic Of Seismic Frequency 2 In Hertz.
    firstOrderHarmonic2: float = field(default=None, metadata={'ID': 9})
    # ID(10): Second Order Harmonic Of Seismic Frequency 2 In Hertz.
    secondOrderHarmonic2: float = field(default=None, metadata={'ID': 10})
    # ID(11): Third Order Harmonic Of Seismic Frequency 2 In Hertz.
    thirdOrderHarmonic2: float = field(default=None, metadata={'ID': 11})
    # ID(12): Amplitude Of The Seismic Frequency Of Interest 2 In dB.
    amplitudeOfFrequency2: float = field(default=None, metadata={'ID': 12})
    
    # ID(13): Seismic Frequency Of Interest 3 In Hertz.
    seismicFrequency3: float = field(default=None, metadata={'ID': 13})
    # ID(14): First Order Harmonic Of Seismic Frequency 1 In Hertz. (Note: The description seems to be a copy-paste error from ID(4))
    firstOrderHarmonic3: float = field(default=None, metadata={'ID': 14})
    # ID(15): Second Order Harmonic Of Seismic Frequency 3 In Hertz.
    secondOrderHarmonic3: float = field(default=None, metadata={'ID': 15})
    # ID(16): Third Order Harmonic Of Seismic Frequency 3 In Hertz.
    thirdOrderHarmonic3: float = field(default=None, metadata={'ID': 16})
    # ID(17): Amplitude Of The Seismic Frequency Of Interest 3 In dB.
    amplitudeOfFrequency3: float = field(default=None, metadata={'ID': 17})
    
    # ID(18): Seismic Frequency Of Interest 4 In Hertz.
    seismicFrequency4: float = field(default=None, metadata={'ID': 18})
    # ID(19): First Order Harmonic Of Seismic Frequency 4 In Hertz.
    firstOrderHarmonic4: float = field(default=None, metadata={'ID': 19})
    # ID(20): Second Order Harmonic Of Seismic Frequency 4 In Hertz.
    secondOrderHarmonic4: float = field(default=None, metadata={'ID': 20})
    # ID(21): Third Order Harmonic Of Seismic Frequency 4 In Hertz.
    thirdOrderHarmonic4: float = field(default=None, metadata={'ID': 21})
    # ID(22): Amplitude Of The Seismic Frequency Of Interest 4 In dB.
    amplitudeOfFrequency4: float = field(default=None, metadata={'ID': 22})
    
    # ID(23): Seismic Frequency Of Interest 5 In Hertz.
    seismicFrequency5: float = field(default=None, metadata={'ID': 23})
    # ID(24): First Order Harmonic Of Seismic Frequency 5 In Hertz.
    firstOrderHarmonic5: float = field(default=None, metadata={'ID': 24})
    # ID(25): Second Order Harmonic Of Seismic Frequency 5 In Hertz.
    secondOrderHarmonic5: float = field(default=None, metadata={'ID': 25})
    # ID(26): Third Order Harmonic Of Seismic Frequency 5 In Hertz.
    thirdOrderHarmonic5: float = field(default=None, metadata={'ID': 26})
    # ID(27): Amplitude Of The Seismic Frequency Of Interest 5 In dB.
    amplitudeOfFrequency5: float = field(default=None, metadata={'ID': 27})

@dataclass
class ZeroOrderAcousticFeatureData(GvRecord):
    # ID(29): Acoustic Frequency Of Interest 1 In Hertz.
    acousticFrequency1: float = field(default=None, metadata={'ID': 29})
    # ID(30): First Order Harmonic Of Acoustic Frequency 1 In Hertz.
    firstOrderHarmonic1: float = field(default=None, metadata={'ID': 30})
    # ID(31): Second Order Harmonic Of Acoustic Frequency 1 In Hertz.
    secondOrderHarmonic1: float = field(default=None, metadata={'ID': 31})
    # ID(32): Third Order Harmonic Of Acoustic Frequency 1 In Hertz.
    thirdOrderHarmonic1: float = field(default=None, metadata={'ID': 32})
    # ID(33): Amplitude Of The Acoustic Frequency Of Interest 1 In dB.
    amplitudeOfFrequency1: float = field(default=None, metadata={'ID': 33})

    # ID(34): Acoustic Frequency Of Interest 2 In Hertz.
    acousticFrequency2: float = field(default=None, metadata={'ID': 34})
    # ID(35): First Order Harmonic Of Acoustic Frequency 2 In Hertz.
    firstOrderHarmonic2: float = field(default=None, metadata={'ID': 35})
    # ID(36): Second Order Harmonic Of Acoustic Frequency 2 In Hertz.
    secondOrderHarmonic2: float = field(default=None, metadata={'ID': 36})
    # ID(37): Third Order Harmonic Of Acoustic Frequency 2 In Hertz.
    thirdOrderHarmonic2: float = field(default=None, metadata={'ID': 37})
    # ID(38): Amplitude Of The Acoustic Frequency Of Interest 2 In Pascals.
    amplitudeOfFrequency2: float = field(default=None, metadata={'ID': 38})

    # ID(39): Acoustic Frequency Of Interest 3 In Hertz.
    acousticFrequency3: float = field(default=None, metadata={'ID': 39})
    # ID(40): First Order Harmonic Of Acoustic Frequency 3 In Hertz.
    firstOrderHarmonic3: float = field(default=None, metadata={'ID': 40})
    # ID(41): Second Order Harmonic Of Acoustic Frequency 3 In Hertz.
    secondOrderHarmonic3: float = field(default=None, metadata={'ID': 41})
    # ID(42): Third Order Harmonic Of Acoustic Frequency 3 In Hertz.
    thirdOrderHarmonic3: float = field(default=None, metadata={'ID': 42})
    # ID(43): Amplitude Of The Acoustic Frequency Of Interest 3 In Pascals.
    amplitudeOfFrequency3: float = field(default=None, metadata={'ID': 43})

    # ID(44): Acoustic Frequency Of Interest 4 In Hertz.
    acousticFrequency4: float = field(default=None, metadata={'ID': 44})
    # ID(45): First Order Harmonic Of Acoustic Frequency 4 In Hertz.
    firstOrderHarmonic4: float = field(default=None, metadata={'ID': 45})
    # ID(46): Second Order Harmonic Of Acoustic Frequency 4 In Hertz.
    secondOrderHarmonic4: float = field(default=None, metadata={'ID': 46})
    # ID(47): Third Order Harmonic Of Acoustic Frequency 4 In Hertz.
    thirdOrderHarmonic4: float = field(default=None, metadata={'ID': 47})
    # ID(48): Amplitude Of The Acoustic Frequency Of Interest 4 In Pascals.
    amplitudeOfFrequency4: float = field(default=None, metadata={'ID': 48})

    # ID(49): Acoustic Frequency Of Interest 5 In Hertz.
    acousticFrequency5: float = field(default=None, metadata={'ID': 49})
    # ID(50): First Order Harmonic Of Acoustic Frequency 5 In Hertz.
    firstOrderHarmonic5: float = field(default=None, metadata={'ID': 50})
    # ID(51): Second Order Harmonic Of Acoustic Frequency 5 In Hertz.
    secondOrderHarmonic5: float = field(default=None, metadata={'ID': 51})
    # ID(52): Third Order Harmonic Of Acoustic Frequency 5 In Hertz.
    thirdOrderHarmonic5: float = field(default=None, metadata={'ID': 52})
    # ID(53): Amplitude Of The Acoustic Frequency Of Interest 5 In Pascals.
    amplitudeOfFrequency5: float = field(default=None, metadata={'ID': 53})

@dataclass
class DetectionData(GvRecord):
    # ID(55): Detection Declaration. 0 = Detection, 1 = No Detection
    detectionDeclaration: int = field(default=None, metadata={'ID': 55})
    # ID(56): Detection Confidence. Confidence of Detection Expressed as a Number from 0 to 99 (Must provide metric)
    detectionConfidence: int = field(default=None, metadata={'ID': 56})

@dataclass
class ZeroOrderExtraFeatureData(GvRecord):
    # ID(58): Proposed Zero Order Feature 1 (Optional). Metric Required
    proposedZeroOrderFeature1: float = field(default=None, metadata={'ID': 58})
    # ID(59): Support Data 1 for Zero Order Feature 1. Data Related to Proposed Zero Order Feature 1. Defined as Required by User
    supportData1ForZeroOrderFeature1: float = field(default=None, metadata={'ID': 59})
    # ID(60): Support Data 2 for Zero Order Feature 1. Data Related to Proposed Zero Order Feature 2. Defined as Required by User
    supportData2ForZeroOrderFeature1: float = field(default=None, metadata={'ID': 60})
    # ID(61): Support Data 3 for Zero Order Feature 1. Data Related to Proposed Zero Order Feature 3. Defined as Required by User
    supportData3ForZeroOrderFeature1: float = field(default=None, metadata={'ID': 61})
    # ID(62): Proposed Zero Order Feature 2 (Optional). Metric Required
    proposedZeroOrderFeature2: float = field(default=None, metadata={'ID': 62})
    # ID(63): Support Data 1 for Zero Order Feature 2. Data Related to Proposed Zero Order Feature 1. Defined as Required by User
    supportData1ForZeroOrderFeature2: float = field(default=None, metadata={'ID': 63})
    # ID(64): Support Data 2 for Zero Order Feature 2. Data Related to Proposed Zero Order Feature 2. Defined as Required by User
    supportData2ForZeroOrderFeature2: float = field(default=None, metadata={'ID': 64})
    # ID(65): Support Data 3 for Zero Order Feature 2. Data Related to Proposed Zero Order Feature 3. Defined as Required by User
    supportData3ForZeroOrderFeature2: float = field(default=None, metadata={'ID': 65})
    # ID(66): Proposed Zero Order Feature 3 (Optional). Metric Required
    proposedZeroOrderFeature3: float = field(default=None, metadata={'ID': 66})
    # ID(67): Support Data 1 for Zero Order Feature 3. Data Related to Proposed Zero Order Feature 1. Defined as Required by User
    supportData1ForZeroOrderFeature3: float = field(default=None, metadata={'ID': 67})
    # ID(68): Support Data 2 for Zero Order Feature 3. Data Related to Proposed Zero Order Feature 2. Defined as Required by User
    supportData2ForZeroOrderFeature3: float = field(default=None, metadata={'ID': 68})
    # ID(69): Support Data 3 for Zero Order Feature 3. Data Related to Proposed Zero Order Feature 3. Defined as Required by User
    supportData3ForZeroOrderFeature3: float = field(default=None, metadata={'ID': 69})

@dataclass
class FirstOrderTargetTrackingData(GvRecord):
    # ID(71): Time of closest point of approach (if applicable) to the sensor in milliseconds
    timeOfCpa: int = field(default=None, metadata={'ID': 71})
    # ID(72): Error of CPA expressed in milliseconds
    cpaError: float = field(default=None, metadata={'ID': 72})
    # ID(73): Target Heading. Target direction of movement in degrees from true north
    targetHeading: float = field(default=None, metadata={'ID': 73})
    # ID(74): Target Heading Error. Error of direction expressed in degrees
    targetHeadingError: float = field(default=None, metadata={'ID': 74})
    # ID(75): Target Range. Target range in meters. Sensor distance from the path of travel may be assumed.
    targetRange: float = field(default=None, metadata={'ID': 75})
    # ID(76): Target Range Error. Error of target range expressed in meters
    targetRangeError: float = field(default=None, metadata={'ID': 76})
    # ID(77): Target Bearing. Target bearing from the sensor in degrees from true north
    targetBearing: float = field(default=None, metadata={'ID': 77})
    # ID(78): Target Bearing Error. Error of target bearing expressed in degrees
    targetBearingError: float = field(default=None, metadata={'ID': 78})
    # ID(79): Target Speed. Velocity of the target in meters per second
    targetSpeed: float = field(default=None, metadata={'ID': 79})
    # ID(80): Target Speed Error. Error of detection expressed in meters per second
    targetSpeedError: float = field(default=None, metadata={'ID': 80})
    # ID(81): Engine Cylinder Count. Number of engine cylinders used by the target vehicle
    engineCylinderCount: int = field(default=None, metadata={'ID': 81})
    # ID(82): Engine Cylinder Count Error. Error of engine cylinder count expressed as a number from 0 to 99
    engineCylinderCountError: int = field(default=None, metadata={'ID': 82})

@dataclass
class FirstOrderExtraFeatureData(GvRecord):
    # ID(84): Proposed First Order Feature 1 (Optional). Metric Required
    proposedFirstOrderFeature1: float = field(default=None, metadata={'ID': 84})
    # ID(85): Support Data 1 for First Order Feature 1. Data Related to Proposed First Order Feature 1. Defined as Required by User
    supportData1ForFirstOrderFeature1: float = field(default=None, metadata={'ID': 85})
    # ID(86): Support Data 2 for First Order Feature 1. Data Related to Proposed First Order Feature 2. Defined as Required by User
    supportData2ForFirstOrderFeature1: float = field(default=None, metadata={'ID': 86})
    # ID(87): Support Data 3 for First Order Feature 1. Data Related to Proposed First Order Feature 3. Defined as Required by User
    supportData3ForFirstOrderFeature1: float = field(default=None, metadata={'ID': 87})
    # ID(88): Proposed First Order Feature 2 (Optional). Metric Required
    proposedFirstOrderFeature2: float = field(default=None, metadata={'ID': 88})
    # ID(89): Support Data 1 for First Order Feature 2. Data Related to Proposed First Order Feature 1. Defined as Required by User
    supportData1ForFirstOrderFeature2: float = field(default=None, metadata={'ID': 89})
    # ID(90): Support Data 2 for First Order Feature 2. Data Related to Proposed First Order Feature 2. Defined as Required by User
    supportData2ForFirstOrderFeature2: float = field(default=None, metadata={'ID': 90})
    # ID(91): Support Data 3 for First Order Feature 2. Data Related to Proposed First Order Feature 3. Defined as Required by User
    supportData3ForFirstOrderFeature2: float = field(default=None, metadata={'ID': 91})
    # ID(92): Proposed First Order Feature 3 (Optional). Metric Required
    proposedFirstOrderFeature3: float = field(default=None, metadata={'ID': 92})
    # ID(93): Support Data 1 for First Order Feature 3. Data Related to Proposed First Order Feature 1. Defined as Required by User
    supportData1ForFirstOrderFeature3: float = field(default=None, metadata={'ID': 93})
    # ID(94): Support Data 2 for First Order Feature 3. Data Related to Proposed First Order Feature 2. Defined as Required by User
    supportData2ForFirstOrderFeature3: float = field(default=None, metadata={'ID': 94})
    # ID(95): Support Data 3 for First Order Feature 3. Data Related to Proposed First Order Feature 3. Defined as Required by User
    supportData3ForFirstOrderFeature3: float = field(default=None, metadata={'ID': 95})

@dataclass
class SecondOrderTargetCharacteristicsData(GvRecord):
    class TargetWeightClass(GvEnum):
        # ID(97): Target Weight Class. 1= 100-1000 LBS, 2= 1000-2800 LBS, 3 = 2800-6000 LBS, 4= 6000-10800 LBS, 5= 10800-42000 LBS, 6= >42000 LBS
        CLASS_1 = 1  # 100-1000 LBS
        CLASS_2 = 2  # 1000-2800 LBS
        CLASS_3 = 3  # 2800-6000 LBS
        CLASS_4 = 4  # 6000-10800 LBS
        CLASS_5 = 5  # 10800-42000 LBS
        CLASS_6 = 6  # >42000 LBS

    class TargetClass(GvEnum):
        # ID(101): Target Class. Wheeled Gasoline Civilian, Wheeled Diesel Civilian, Tracked Diesel Commercial, Wheeled Diesel Commercial
        WHEELED_GASOLINE_CIVILIAN = "Wheeled Gasoline Civilian"
        WHEELED_DIESEL_CIVILIAN = "Wheeled Diesel Civilian"
        TRACKED_DIESEL_COMMERCIAL = "Tracked Diesel Commercial"
        WHEELED_DIESEL_COMMERCIAL = "Wheeled Diesel Commercial"
        OTHER = "Other"

    # ID(97): Target Weight Class. 1= 100-1000 LBS, 2= 1000-2800 LBS, 3 = 2800-6000 LBS, 4= 6000-10800 LBS, 5= 10800-42000 LBS, 6= >42000 LBS
    targetWeightClass: TargetWeightClass = field(default=None, metadata={'ID': 97})
    # ID(98): Target Weight Class Confidence. Confidence of target weight class expressed as a number from 0 to 99. Metric Required
    targetWeightClassConfidence: int = field(default=None, metadata={'ID': 98})
    # ID(99): Target Identifier. Identifier assigned to a specific target and recognized by another sensor as the same target. Expressed as a number from 1 to 999
    targetIdentifier: int = field(default=None, metadata={'ID': 99})
    # ID(100): Target Identifier Confidence. Confidence of target identifier expressed as a number from 0 to 99. Metric Required
    targetIdentifierConfidence: int = field(default=None, metadata={'ID': 100})
    # ID(101): Target Class. Wheeled Gasoline Civilian, Wheeled Diesel Civilian, Tracked Diesel Commercial, Wheeled Diesel Commercial
    targetClass: TargetClass = field(default=None, metadata={'ID': 101})
    # ID(102): Target Class Confidence. Confidence of target class expressed as a number from 0 to 99. Metric Required
    targetClassConfidence: int = field(default=None, metadata={'ID': 102})

@dataclass
class SecondOrderExtraFeatureData(GvRecord):
    # ID(103): Proposed Second Order Feature 1 (Optional). Metric Required
    proposedSecondOrderFeature1: float = field(default=None, metadata={'ID': 103})
    # ID(104): Support Data 1 for Second Order Feature 1. Data Related to Proposed Second Order Feature 1. Defined as Required by User
    supportData1ForSecondOrderFeature1: float = field(default=None, metadata={'ID': 104})
    # ID(105): Support Data 2 for Second Order Feature 1. Data Related to Proposed Second Order Feature 2. Defined as Required by User
    supportData2ForSecondOrderFeature1: float = field(default=None, metadata={'ID': 105})
    # ID(106): Support Data 3 for Second Order Feature 1. Data Related to Proposed Second Order Feature 3. Defined as Required by User
    supportData3ForSecondOrderFeature1: float = field(default=None, metadata={'ID': 106})
    # ID(107): Proposed Second Order Feature 2 (Optional). Metric Required
    proposedSecondOrderFeature2: float = field(default=None, metadata={'ID': 107})
    # ID(108): Support Data 1 for Second Order Feature 2. Data Related to Proposed Second Order Feature 1. Defined as Required by User
    supportData1ForSecondOrderFeature2: float = field(default=None, metadata={'ID': 108})
    # ID(109): Support Data 2 for Second Order Feature 2. Data Related to Proposed Second Order Feature 2. Defined as Required by User
    supportData2ForSecondOrderFeature2: float = field(default=None, metadata={'ID': 109})
    # ID(110): Support Data 3 for Second Order Feature 2. Data Related to Proposed Second Order Feature 3. Defined as Required by User
    supportData3ForSecondOrderFeature2: float = field(default=None, metadata={'ID': 110})
    # ID(111): Proposed Second Order Feature 3 (Optional). Metric Required
    proposedSecondOrderFeature3: float = field(default=None, metadata={'ID': 111})
    # ID(112): Support Data 1 for Second Order Feature 3. Data Related to Proposed Second Order Feature 1. Defined as Required by User
    supportData1ForSecondOrderFeature3: float = field(default=None, metadata={'ID': 112})
    # ID(113): Support Data 2 for Second Order Feature 3. Data Related to Proposed Second Order Feature 2. Defined as Required by User
    supportData2ForSecondOrderFeature3: float = field(default=None, metadata={'ID': 113})
    # ID(114): Support Data 3 for Second Order Feature 3. Data Related to Proposed Second Order Feature 3. Defined as Required by User
    supportData3ForSecondOrderFeature3: float = field(default=None, metadata={'ID': 114})

#
# End LLM generated code
#

@dataclass
class GvResult:
    zeroOrderSeismic : ZeroOrderSeismicFeatureData = None
    zeroOrderAcoustic: ZeroOrderAcousticFeatureData = None
    zeroOrderExtra: ZeroOrderExtraFeatureData = None
    detection: DetectionData = None
    firstOrderTargetTracking: FirstOrderTargetTrackingData = None
    firstOrderExtra: FirstOrderExtraFeatureData = None
    secondOrderTargetCharacteristics: SecondOrderTargetCharacteristicsData = None
    secondOrderExtra: SecondOrderExtraFeatureData = None

    # Iterate through all the members and write them to the CSV if they exist
    def write_to_csv(self, csv_writer: csv.writer, sequence : int, time: datetime, with_titles: bool):
        for attr in vars(self):
            a = getattr(self, attr);
            if a is not None and hasattr(a, "write_to_csv"):
                a.write_to_csv(csv_writer, sequence, time, with_titles)


    
    